/**
 * Represents a DOM node in a serialized format
 */
export interface DOMNode {
    tagName: string;
    id?: string;
    className?: string;
    attributes: Record<string, string>;
    textContent?: string;
    children: DOMNode[];
    xpath?: string;
    cssPath?: string;
}

/**
 * Represents a snapshot of the DOM at a specific point in time
 */
export interface DOMSnapshot {
    url: string;
    title?: string;
    timestamp: number;
    rootNode: DOMNode;
}

/**
 * Healing strategy types that can be used to find alternative selectors
 */
export type HealingStrategy =
    | 'original'       // The original selector
    | 'css-path'       // Full CSS path
    | 'xpath'          // XPath
    | 'id-based'       // Based on ID attribute
    | 'class-based'    // Based on class attribute
    | 'attribute'      // Based on other attributes
    | 'text-based'     // Based on text content
    | 'position'       // Based on position in DOM
    | 'similarity';    // Based on element similarity

/**
 * Source of the healing result
 */
export type HealingSource =
    | 'local'     // Generated by local algorithm
    | 'server'    // Retrieved from server
    | 'cache';    // Retrieved from local cache

/**
 * Represents a healed selector suggestion with confidence score
 */
export interface HealingResult {
    selector: string;
    score: number;            // Confidence score (0-1)
    strategy: HealingStrategy;
    source: HealingSource;
    metadata?: Record<string, any>;
}

/**
 * Configuration options for CyFix
 */
export interface CyFixOptions {
    enabled?: boolean;
    serverUrl?: string;
    localHealingOnly?: boolean;
    autoCapture?: boolean;
    strategies?: HealingStrategy[];
    minScore?: number;        // Minimum score to accept a healing result (0-1)
    reportUnhealed?: boolean; // Whether to report unhealed selectors
}